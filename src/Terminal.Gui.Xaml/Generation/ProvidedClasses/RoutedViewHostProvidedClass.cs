namespace ReillyDigital.Terminal.Gui.Xaml.Generation.ProvidedClasses
{
	/// <summary>
	/// Class for source generation of the RoutedViewHost provided class.
	/// </summary>
	public sealed class RoutedViewHostProvidedClass : ProvidedClassBase
	{
		/// <inheritdoc />
		public override string Name { get; } = "Terminal.Gui.Xaml.RoutedViewHost.g.cs";

		/// <inheritdoc />
		public override string Source { get; } = @"// <auto-generated />

#nullable enable

using Terminal.Gui;

namespace Terminal.Gui.Xaml;

public sealed class RoutedViewHost : View
{
	public bool CanNavigateBack => NavigateBackStack.Count > 0;

	public bool CanNavigateForward => NavigateForwardStack.Count > 0;

	private Stack<View> NavigateBackStack { get; } = new Stack<View>();

	private Stack<View> NavigateForwardStack { get; } = new Stack<View>();

	private View? _CurrentView;
	public View? CurrentView
	{
		get => _CurrentView;
		private set
		{
			RemoveAll();
			_CurrentView = value;
			var view = _CurrentView ?? _DefaultView;
			if (view is not null) {
				Add(view);
			}
		}
	}

	private View? _DefaultView;
	public View? DefaultView
	{
		get => _DefaultView;
		private set
		{
			if (CurrentView is null)
			{
				RemoveAll();
			}
			_DefaultView = value;
			if (_DefaultView is not null) {
				Add(_DefaultView);
			}
		}
	}

	public void Navigate(View view)
	{
		if (CurrentView is not null)
		{
			NavigateBackStack.Push(CurrentView);
		}
		CurrentView = view;
	}

	public void Navigate(Action<View> loader)
	{
		var view = new View();
		loader(view);
		Navigate(view);
	}

	public bool NavigateBack()
	{
		if (!CanNavigateBack)
		{
			return false;
		}
		if (CurrentView is not null)
		{
			NavigateForwardStack.Push(CurrentView);
		}
		CurrentView = NavigateBackStack.Pop();
		return true;
	}

	public bool NavigateForward()
	{
		if (!CanNavigateForward)
		{
			return false;
		}
		if (CurrentView is not null)
		{
			NavigateBackStack.Push(CurrentView);
		}
		CurrentView = NavigateForwardStack.Pop();
		return true;
	}
}
";
	}
}
