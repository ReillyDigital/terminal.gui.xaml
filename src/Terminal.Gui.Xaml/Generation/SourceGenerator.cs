using System.Text;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

using ReillyDigital.Terminal.Gui.Xaml.Generation.Sources;

namespace ReillyDigital.Terminal.Gui.Xaml.Generation
{
	/// <summary>
	/// Entry class for source generation.
	/// </summary>
	[Generator]
	public class SourceGenerator : IIncrementalGenerator
	{
		/// <summary>
		/// Entry method for source generation.
		/// </summary>
		/// <param name="initContext">The initialization context.</param>
		public void Initialize(IncrementalGeneratorInitializationContext initContext)
		{
			initContext.RegisterSourceOutput(
				initContext
					.SyntaxProvider
					.CreateSyntaxProvider(
						predicate: (node, cancellationToken) =>
							node is ClassDeclarationSyntax && node.SyntaxTree.FilePath.EndsWith(".xaml.cs"),
						transform: (context, cancellationToken) => (ClassDeclarationSyntax)context.Node
					),
				(context, node) =>
				{
					var source = new ClassSource(node);
					context.AddSource(
						source.FileName,
						SyntaxFactory
							.ParseCompilationUnit(source.ToString())
							.NormalizeWhitespace(indentation: "\t")
							.GetText(encoding: Encoding.UTF8)
					);
				}
			);
			initContext.RegisterPostInitializationOutput((context) =>
			{
				context.AddSource(
					"ReillyDigital.Terminal.Gui.Xaml.ITerminalXamlView.g.cs",
					@"// <auto-generated />

#nullable enable

namespace ReillyDigital.Terminal.Gui.Xaml;

using Terminal.Gui;

public interface ITerminalXamlView
{
	public void Add(View view);

	public void InitializeComponent();
}
"
				);
				context.AddSource(
					"ReillyDigital.Terminal.Gui.Xaml.RoutedViewHost.g.cs",
					@"// <auto-generated />

#nullable enable

namespace ReillyDigital.Terminal.Gui.Xaml;

using Terminal.Gui;

public sealed class RoutedViewHost : View
{
	public bool CanNavigateBack => NavigateBackStack.Count > 0;

	public bool CanNavigateForward => NavigateForwardStack.Count > 0;

	private Stack<View> NavigateBackStack { get; } = new Stack<View>();

	private Stack<View> NavigateForwardStack { get; } = new Stack<View>();

	private View? _CurrentView;
	public View? CurrentView
	{
		get => _CurrentView;
		private set
		{
			RemoveAll();
			_CurrentView = value;
			Add(_CurrentView);
		}
	}

	public void Navigate(View view)
	{
		if (CurrentView is not null)
		{
			NavigateBackStack.Push(CurrentView);
		}
		CurrentView = view;
	}

	public void Navigate(Action<View> loader)
	{
		var view = new View();
		loader(view);
		Navigate(view);
	}

	public bool NavigateBack()
	{
		if (!CanNavigateBack)
		{
			return false;
		}
		if (CurrentView is not null)
		{
			NavigateForwardStack.Push(CurrentView);
		}
		CurrentView = NavigateBackStack.Pop();
		return true;
	}

	public bool NavigateForward()
	{
		if (!CanNavigateForward)
		{
			return false;
		}
		if (CurrentView is not null)
		{
			NavigateBackStack.Push(CurrentView);
		}
		CurrentView = NavigateForwardStack.Pop();
		return true;
	}
}
"
				);
			});
		}
	}
}
